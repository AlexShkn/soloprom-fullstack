generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  productId       String          @unique
  isPopular       Boolean         @default(false)
  discount        Float?
  categoryName    String
  subcategoryName String
  name            String
  descr           String?
  url             String?
  img             String?
  brand           String?
  country         String?
  plates          String?
  container       String?
  voltage         String?
  load_index      String?
  defaultPrice    Float
  delivery        String?
  sizes           Json?
  volumes         Json?
  models          Json?
  regalia         Json?
  popularRecord   PopularProduct? @relation("PopularRelation")
  size            String?
  productType     String
  productDescr    ProductDescr?   @relation(name: "ProductToDescr")

  Category    Category    @relation(fields: [categoryName], references: [name])
  SubCategory SubCategory @relation(fields: [subcategoryName], references: [name])
  groups      Group[]     @relation("ProductGroups")

  id            String @id @default(uuid())
  categoryId    String
  subcategoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductDescr {
  id        String   @id @default(uuid())
  productId String   @unique
  name      String
  text      String?
  models    Json?
  reviews   Json?    @default("[]")
  rating    Float    @default(0.0)
  product   Product  @relation(fields: [productId], references: [productId], name: "ProductToDescr")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PopularProduct {
  id        String   @id @default(uuid())
  productId String   @unique
  product   Product  @relation(fields: [productId], references: [productId], name: "PopularRelation") // Название связи
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  products    Product[]
  SubCategory SubCategory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Group       Group[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String    @unique
  categoryId String
  products   Product[]
  Category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Group {
  id         String    @id @default(uuid())
  name       String    @unique
  categoryId String // Связь с категорией
  Category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[] @relation("ProductGroups")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Account {
  id String @id @default(uuid())

  type     String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken  String? @map("access_token")
  expiresAt    Int     @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email     String
  token     String    @unique
  type      TokenType
  expiresIn DateTime  @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  displayName String
  picture     String?

  role UserRole @default(REGULAR)

  isVerified         Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  method AuthMethod

  accounts Account[]
  orders   Order[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Order {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  products    Json
  totalAmount Float
  status      OrderStatus @default(PROCESSING)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

enum UserRole {
  REGULAR
  ADMIN
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
  YANDEX
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}

enum OrderStatus {
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}
